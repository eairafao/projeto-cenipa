# -*- coding: utf-8 -*-
"""PROJETO_MAMACOS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gRugxk1YFluvlxfKOE9D4oErZv9EW4nP
"""

import pandas as pd 
import seaborn as sns
from collections import Counter
import matplotlib.pyplot as plt
import numpy as np # linear algebra

cenipaOcorrencias = pd.read_csv("/content/ocorrencias_cenipa.csv", sep = ';', encoding='ISO-8859-1')
cenipaOcorrencias.head()

## ACESSAR A VARIAVEL INTERNAMENTE
##print(cenipaOcorrencias['tipo'])

# VARIÁVEL: tipo

acidente = []
incidenteGrave = []
incidente = []

for i in cenipaOcorrencias['tipo']:
  if i == 'ACIDENTE':
    acidente.append(i)
  elif i == 'INCIDENTE GRAVE':
    incidenteGrave.append(i)
  elif i == 'INCIDENTE':
    incidente.append(i)

print("Tipo ocorrencia value = (ACIDENTE): ",acidente.count("ACIDENTE"))
print("Tipo ocorrencia value = (INCIDENTE GRAVE): ",incidenteGrave.count("INCIDENTE GRAVE"))
print("Tipo ocorrencia value = (INCIDENTE): ",incidente.count("INCIDENTE"))

#Dados externos
recipes = ["INCIDENTE" , "ACIDENTE", "INCIDENTE GRAVE"]

# Dados em números na parte Externa
recipe = [incidente.count("INCIDENTE"), acidente.count("ACIDENTE"), incidenteGrave.count("INCIDENTE GRAVE")]

# Gráfico
grafico = cenipaOcorrencias['tipo'].value_counts().plot(kind='pie', label="", fontsize = 17, shadow=True, autopct='%1.1f%%',figsize=(7,7))

grafico.legend(recipe)
grafico.set_title("Tipos de acidentes")

list_tipo = [len(acidente), len(incidente), len(incidenteGrave)]
print(list_tipo)
dataframe_tipo = pd.DataFrame({'Tipos':list_tipo})
dataframe_tipo.describe().round(2)

"""# Nova seção"""

# VARIÁVEL: descricao

descricoesDict = {}
descMaisRecorrente = ''
n = 0

for i in cenipaOcorrencias['descricao']:
  if descricoesDict.get(i):
    valor = int(descricoesDict.get(i)) + 1
    descricoesDict[i] = str(valor)
  else:
    descricoesDict[i] = '1'

for d in descricoesDict.keys():
  valor = descricoesDict.get(d)
  valor = int(valor)
  if valor >= n:
    n = valor
    descMaisRecorrente = d

descricoesDict2 = {}
descMaisRecorrente2 = ''
n2 = 0

for i in cenipaOcorrencias['descricao']:
  if descricoesDict2.get(i):
    valor = int(descricoesDict2.get(i)) + 1
    descricoesDict2[i] = str(valor)
  else:
    descricoesDict2[i] = '1'

del descricoesDict2[descMaisRecorrente]
for d in descricoesDict2.keys():
  valor = descricoesDict2.get(d)
  valor = int(valor)
  if valor >= n2:
    n2 = valor
    descMaisRecorrente2 = d

descList = [descMaisRecorrente, descMaisRecorrente2]
casosList = [n, n2]

dataframe_desc = pd.DataFrame({'Descrição':descList, 'Casos': casosList})
dataframe_desc

# VARIÁVEL: hora

# todas as horas
horas = []
# separando por períodos
madrugadaList = [] # 00h - 06
manhaList = [] # 06 - 12
tardeList = [] # 12 - 18
noiteList = [] # 18 - 00

def setHours():
  HorasMinutos = []

  for i in cenipaOcorrencias['hora']:
    HorasMinutos.append(i.split(sep=":", maxsplit=1))

  for n in HorasMinutos:
    horas.append(n[0])

def setGroups():
  for h in horas:
    if(h == '00' or h == '01' or h == '02' or h == '03' or h == '04' or h == '05'):
      madrugadaList.append(h)
    elif(h == '06' or h == '07' or h == '08' or h == '09' or h == '10' or h == '11'):
      manhaList.append(h)
    elif(h == '12' or h == '13' or h == '14' or h == '15' or h == '16' or h == '17'):
      tardeList.append(h)
    elif(h == '18' or h == '19' or h == '20' or h == '21' or h == '22' or h == '23'):
      noiteList.append(h)

setHours()
setGroups()

grupos = ['Madrugada', 'Manhã', 'Tarde', 'Noite']
valores = [len(madrugadaList), len(manhaList), len(tardeList), len(noiteList)]
plt.figure(figsize=(8, 6), dpi=80)
plt.bar(grupos, valores)
plt.xlabel('Períodos do dia', color='black', )
plt.ylabel('Casos', color='black')
plt.grid(False)
plt.show()

periodos = [len(madrugadaList), len(manhaList), len(tardeList), len(noiteList)]
dataframe_periodos = pd.DataFrame({'Períodos do dia':periodos})
dataframe_periodos.describe().round(2)

# VARIÁVEL: ocorrencia_saida_pista

NAO = []
SIM = []

for i in cenipaOcorrencias['ocorrencia_saida_pista']:
  if i == 'SIM':
    SIM.append(i)
  elif i == 'NÃO':
    NAO.append(i)

# Dados em números na parte Externa
recipe2 = [len(SIM), len(NAO)]

# Gráfico
grafico2 = cenipaOcorrencias['ocorrencia_saida_pista'].value_counts().plot(kind='pie', label="", fontsize = 17, shadow=True, autopct='%1.1f%%',figsize=(8.5,8.5))

grafico2.legend(recipe2)
grafico2.set_title("Saída Pista")

list_saida_pista = [len(NAO), len(SIM)]
print(list_saida_pista)
list_saida_pista = pd.DataFrame({'Tipos':list_saida_pista})
list_saida_pista.describe().round(2)

# São Paulo, por ter a maior quantidade de aeronaves, consequentemente também tem o maior número de incidentes
porEstado = cenipaOcorrencias.groupby('estado')['codigo'].count().sort_values(ascending=[False])
porEstado

# Plotando a quantidade de ocorrências por estado em gráfico
plt.style.use("ggplot")
porEstado.plot(kind='bar', subplots=True, label="Ocorrências nos estados" ,figsize=(15, 7))

dataframe_tipo = pd.DataFrame({'Tipos':porEstado})
dataframe_tipo.describe().round(2)

porAno = cenipaOcorrencias.groupby('ano')['codigo'].count().sort_values(ascending=[False])
porAno

# Plotando a quantidade de ocorrências por estado em gráfico
plt.style.use("ggplot")
porAno.plot(kind='barh', subplots=True, label="Ocorrências por ano" ,figsize=(7, 7))

dataframe_tipo = pd.DataFrame({'Tipos':porAno})
dataframe_tipo.describe().round(2)

simAL = []
naoAL = []
indeterminadoAL = []

for i in cenipaOcorrencias['aeronave_liberada']:
  if i == 'SIM':
    simAL.append(i)
  elif i == 'NÃO':
    naoAL.append(i)
  elif i == 'INDETERMINADO':
    indeterminadoAL.append(i)

print("aeronave liberada value = (SIM): ",simAL.count("SIM"))
print("aeronave liberada value = (NÃO): ",naoAL.count("NÃO"))
print("aeronave liberada value = (INDETERMINADO): ",indeterminadoAL.count("INDETERMINADO"))

# Dados em números na parte Externa
recipe = [simAL.count("SIM"), naoAL.count("NÃO"), indeterminadoAL.count("INDETERMINADO")]

# Gráfico
grafico = cenipaOcorrencias['aeronave_liberada'].value_counts().plot(kind='pie', label="", fontsize = 17, shadow=True, autopct='%1.1f%%',figsize=(8.5,8.5))

grafico.legend(recipe)
grafico.set_title("Aeronave Liberada")

list_aero_liberada = [len(simAL), len(naoAL), len(indeterminadoAL)]
print(list_aero_liberada)
list_aero_liberada = pd.DataFrame({'Tipos':list_aero_liberada})
list_aero_liberada.describe().round(2)

aeronave_tipo = cenipaOcorrencias.groupby('aeronave_tipo')['codigo'].count().sort_values(ascending=[False])
aeronave_tipo

# Plotando a quantidade de ocorrências por estado em gráfico
plt.style.use("ggplot")
aeronave_tipo.plot(kind='barh', subplots=True, label="Ocorrências nos estados" ,figsize=(12, 7))

ocorrencias_estados = pd.DataFrame({'Tipos':aeronave_tipo})
ocorrencias_estados.describe().round(2)

finalizadaSI = []
indeterminadaSI = []
ativaSI = []

for i in cenipaOcorrencias['status_investigacao']:
  if i == 'FINALIZADA':
    finalizadaSI.append(i)
  elif i == 'INDETERMINADA':
    indeterminadaSI.append(i)
  elif i == 'ATIVA':
    ativaSI.append(i)

print("Status investigacao value = (FINALIZADA): ",finalizadaSI.count("FINALIZADA"))
print("Status investigacao value = (INDETERMINADA): ",indeterminadaSI.count("INDETERMINADA"))
print("Status investigacao value = (ATIVA): ",ativaSI.count("ATIVA"))

# Dados em números na parte Externa
recipe4 = [finalizadaSI.count("FINALIZADA"), indeterminadaSI.count("INDETERMINADA"), ativaSI.count("ATIVA")]

# Gráfico
grafico4 = cenipaOcorrencias['status_investigacao'].value_counts().plot(kind='pie', label="", fontsize = 15, shadow=True, autopct='%1.1f%%',figsize=(8.5,8.5))

grafico4.legend(recipe4)
grafico4.set_title("Status investigação")

investigacao_status = [len(finalizadaSI), len(indeterminadaSI), len(ativaSI)]
print(investigacao_status)
dataframe_status = pd.DataFrame({'Tipos':investigacao_status})
dataframe_status.describe().round(2)

motor_tipo = cenipaOcorrencias.groupby('motor_tipo')['codigo'].count().sort_values(ascending=[False])
motor_tipo

# Plotando a quantidade de ocorrências por tipo do motor
plt.style.use("ggplot")
motor_tipo.plot(kind='barh', subplots=True, label="Tipo do motor" ,figsize=(7, 7))

dataframe_tipo_motor = pd.DataFrame({'Tipos':motor_tipo})
dataframe_tipo_motor.describe().round(2)

# cada variável representa 1 decáda, isto é, deca30: 1930 - 1939
deca30 = []
deca40 = []
deca50 = []
deca60 = []
deca70 = []
deca80 = []
deca90 = []
deca20 = []
deca21 = []

for i in cenipaOcorrencias['aeronave_ano_fabricacao']:
  i = str(i)
  if i != None and i != '0':
    valor = i[-2:]
    valor = int(valor)
    if valor in range(30, 39):
      deca30.append(i)
    elif valor in range(40, 49):
      deca40.append(i)
    elif valor in range(50, 59):
      deca50.append(i)
    elif valor in range(60, 69):
      deca60.append(i)
    elif valor in range(70, 79):
      deca70.append(i)  
    elif valor in range(80, 89):
      deca80.append(i)  
    elif valor in range(90, 99):
      deca90.append(i)
    elif valor in range(10, 19):
      deca21.append(i)
    elif valor in range(0, 9):
      deca20.append(i)

grupos = ['36 - 39', '40 - 49', '50 - 59', '60 - 69', '70 - 79', '80 - 89', '90 - 99', '2000 - 2009', '2010 - 2019']
valores = [len(deca30), len(deca40), len(deca50), len(deca60), len(deca70), len(deca80), len(deca90), len(deca20), len(deca21)]
plt.figure(figsize=(20, 7), dpi=80)
plt.bar(grupos, valores)
plt.xlabel('fabricação de aeronaves por década', color='black', )
plt.ylabel('Casos', color='black')
plt.grid(True)
plt.show()

list_ano_fabricacao = [len(deca30), len(deca40), len(deca50), len(deca60), len(deca70), len(deca80), len(deca90), len(deca20), len(deca21)]
dataframe_fabricacao = pd.DataFrame({'Tipos':list_ano_fabricacao})
dataframe_fabricacao.describe().round(2)

loc_list = Counter(cenipaOcorrencias['aeronave_motor_quantidade'])
tipo2 = sorted(loc_list, key = loc_list.get, reverse = True)
events = sorted(list(loc_list.values()), reverse = True)

sns.set(style="whitegrid",font_scale=1.5)
sns.set_color_codes("dark")
fig = plt.figure(figsize=(9, 6))
sub3 = fig.add_subplot(111)
sns.barplot(x=events[:20], y=tipo2[:20], color='g', ax=sub3)
texts = sub3.set(ylabel="Quantidade de motor", xlabel="Número de ocorrências")
plt.tight_layout(w_pad=4, h_pad=3)

dataframe_qntd_motor = pd.DataFrame({'Tipos':loc_list})
dataframe_qntd_motor.describe().round(2)

fase_operacao = cenipaOcorrencias.groupby('aeronave_fase_operacao')['codigo'].count().sort_values(ascending=[False])
fase_operacao

# Plotando a quantidade de ocorrências por fase da operacao
plt.style.use("ggplot")
fase_operacao.plot(kind='bar', subplots=True, label="Fase Operação" ,figsize=(15, 7))

dataframe_fase_operacao = pd.DataFrame({'Tipos':fase_operacao})
dataframe_fase_operacao.describe().round(2)

aeronave = {}
valores = []

for i in cenipaOcorrencias['aeronave_nivel_dano']:
  if aeronave.get(i):
    valor = int(aeronave.get(i)) + 1
    aeronave[i] = str(valor)
  else:
    aeronave[i] = '1'

for k in aeronave.keys():
  valor = aeronave.get(k)
  valores.append(valor)

fase_count = Counter(cenipaOcorrencias['aeronave_nivel_dano'])
fase = sorted(fase_count, key = fase_count.get, reverse = True)
count = sorted (list(fase_count.values()), reverse = True)

sns.set(style="whitegrid",font_scale=1.5)
fig = plt.figure(figsize=(12, 6))
sub3 = fig.add_subplot(111)
sns.barplot(x=count[:20], y=fase[:20], color='b', ax=sub3)
texts = sub3.set(ylabel="Casos", xlabel="Nível de dano")
plt.tight_layout(w_pad=4, h_pad=3)

dataframe_nivel_dano = pd.DataFrame({'Tipos':fase_count})
dataframe_nivel_dano.describe().round(2)

# VARIÁVEIS: tipo + estado(REGIÃO)

dic_regioes = {'Nordeste': ['AL', 'BA', 'CE', 'MA', 'PB', 'PE', 'PI', 'RN', 'SE'],
                'Norte': ['AM', 'RR', 'AP', 'PA', 'TO', 'RO', 'AC'],
                'Centro Oeste': ['MT', 'MS', 'GO'], 
                'Sudeste': ['SP', 'RJ', 'ES', 'MG'],
                'Sul': ['PR', 'RS', 'SC']}
tipos = ['ACIDENTE', 'INCIDENTE']

dic_01 = {i: [ len([k for k in list(cenipaOcorrencias.loc[cenipaOcorrencias['tipo'] == i, ['estado']]['estado'])
                    if k in dic_regioes[j]]) for j in dic_regioes.keys()] for i in tipos}

dic_01['tipo'] = list(dic_regioes.keys())
dados_regioes = pd.DataFrame(dic_01)
dados_regioes

def numero_em_cima(rects, ax):
    for rect in rects:
        height = rect.get_height()
        ax.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  
                    textcoords="offset points",
                    ha='center', va='bottom')

x = np.arange(5)
width = 0.35

fig, ax = plt.subplots(figsize=(15,10))

rects1 = ax.bar(x - width/2, dados_regioes['ACIDENTE'], width, label='ACIDENTE')
rects2 = ax.bar(x + width/2, dados_regioes['INCIDENTE'], width, label='INCIDENTE')

ax.set_ylabel('Ocorrências')
ax.set_title('REGIÕES\nACIDENTE vs INCIDENTE', )
ax.set_xticks(x)
ax.set_xticklabels(dados_regioes['tipo'])
ax.legend()

numero_em_cima(rects1, ax)
numero_em_cima(rects2, ax)
plt.legend(fontsize=12)
plt.show()

# VARIÁVEIS: estado(região) + aeronave_liberada

tipos = ['SIM', 'INDETERMINADO']

dic_01 = {i: [ len([k for k in list(cenipaOcorrencias.loc[cenipaOcorrencias['aeronave_liberada'] == i, ['estado']]['estado'])
                    if k in dic_regioes[j]]) for j in dic_regioes.keys()] for i in tipos}

dic_01['aeronave_liberada'] = list(dic_regioes.keys())
dados_regioes = pd.DataFrame(dic_01)
dados_regioes

x = np.arange(5)
width = 0.35

fig, ax = plt.subplots(figsize=(15,10))

rects1 = ax.bar(x - width/2, dados_regioes['SIM'], width, label='SIM')
rects2 = ax.bar(x + width/2, dados_regioes['INDETERMINADO'], width, label='INDETERMINADO')

ax.set_ylabel('Ocorrências')
ax.set_title('REGIÕES\nSIM vs INDETERMINADO', )
ax.set_xticks(x)
ax.set_xticklabels(dados_regioes['aeronave_liberada'])
ax.legend()

numero_em_cima(rects1, ax)
numero_em_cima(rects2, ax)
plt.legend(fontsize=12)
plt.show()